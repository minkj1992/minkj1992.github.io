[{"categories":["algorithm"],"content":"Sorting algorithms","date":"2022-01-12","objectID":"/sorting/","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"tl;dr index sorting name time space description 1 Bubble O(n^2) O(1) 루프당 max가 가장 뒤, swap O(n^2) 2 Selection O(n^2) O(1) 루프당 min 맨 앞, swap O(n) 3 Insertion O(n^2) O(1) I까지 sort 보장, 정렬이 어느정도 되어있다면 사용할 것 4 Merge O(nlogn) O(n) nlogn 알고리즘 중 유일한 stable 5 Heap O(nlogn) O(1) insert(O(logn) * n개 원소, space가 1이 포인트 6 Quick O(nlogn) O(n) piv기준 작으면 left 크거나 같으면 right,balanced partition을 위해 random piv를 해준다. ","date":"2022-01-12","objectID":"/sorting/:1:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"Bubble Sort ","date":"2022-01-12","objectID":"/sorting/:2:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"Selection Sort ","date":"2022-01-12","objectID":"/sorting/:3:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"Insertion Sort 이미 정렬된 상태라면 O(n)의 빠른 속도를 보인다. 정렬된 상태에서 빠른 이유는 각 insert마다 1번의 비교만 하면 되기 때문이다. reversed를 사용하면 insert시 arr re-arrange를 방지 가능하다. 단점: 삽입을 하게 되면 데이터가 하나씩 뒤로 밀려야 되기 때문에 배열이 길어질수록 효율이 떨어진다. 개인적으로 input()받을 때 insertionSort를 사용하면 입력과 정렬을 동시에 할 수 있어서 더욱 효율적인 것 같다. def insertion_sort(arr): n = len(arr) for i in range(1, n): val = arr[i] j = i - 1 if arr[j] \u003c val: continue while j \u003e= 0 and val \u003c arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = val return arr ","date":"2022-01-12","objectID":"/sorting/:4:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"Merge Sort def merge_sort(arr): def merge(left, right): l = r = 0 result = [] while l \u003c len(left) and r \u003c len(right): if left[l] \u003c right[r]: result.append(left[l]) l+=1 else: result.append(right[r]) r+=1 return result + left[l:] + right[r:] # 나머지 (left over) if len(arr) \u003c= 1: return arr mid = len(arr) // 2 return merge(merge_sort(arr[:mid]), merge_sort(arr[mid:])) ","date":"2022-01-12","objectID":"/sorting/:5:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"Heap Sort ","date":"2022-01-12","objectID":"/sorting/:6:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["algorithm"],"content":"Quick Sort 성능을 생각하면 piv를 random으로 찾아야 한다. from __future__ import annotations def quick_sort(arr: list[int]) -\u003e list[int]: if len(arr) \u003c= 1: return arr piv = arr[0] others = arr[1:] left = [v for v in others if v \u003c= piv] right = [v for v in others if v \u003e piv] return quick_sort(left) + [piv] + quick_sort(right) ","date":"2022-01-12","objectID":"/sorting/:7:0","tags":["algorithm","dev","interview"],"title":"Sorting algorithms","uri":"/sorting/"},{"categories":["dev"],"content":"All Basic Computer Science","date":"2022-01-10","objectID":"/interview/","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Operating System … ","date":"2022-01-10","objectID":"/interview/:1:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Network 웹 통신의 큰 흐름: https://www.google.com/ 을 접속할 때 일어나는 일 키워드: dhcp, dns, nat, isp, 3-way / 4-way handshake, ssl (ssl handshake) Process 가장 먼저 브라우저가 url에 적힌 값을 파싱해서 HTTP Request Message를 만들고, OS에 전송 요청을 합니다. OS는 DNS Lookup을 수행합니다. 룩업 과정은 etc/hosts \u003e DNS Cache \u003e Cache가 없을 경우 dns server로 ip를 얻어옵니다. DNS server로 ip request 이때 DNS server IP는 1차적으로 isp(internet service provider, ex kt, skt…)가 제공하는 정보들이 dhcp에 의해 컴퓨터에 세팅됩니다. dhcp는 wifi를 쓸 경우, 공유기에 연결되어있는 gateway ip와 router의 NAT을 통해 사설 ip(private ip)를 할당 받으며, 외부 통신을 할 경우 router의 Public ip을 사용합니다. ISP에 의해 세팅되어 있는 dns server로 아래 형식의 요청을 보내어, 도메인에 매핑된 ip를 받아옵니다. - from: router ip(nat ip) - to: 받아온 ip - 게이트웨이 ip : wifi이면 공유기 연결 게이트웨이 ip / 스마트폰이면 자체 ip 루트 도메인서버에서부터 서브도메인 서버순으로 dns query 이제 DNS Server로 DNS Query를 요청하게 되면 DNS 서버는 Root name server에 해당 도메인을 질의하고, .com name server의 ip를 받아오게 됩니다. 그 후 .com 네임 서버에 도메인 Query하게되면 google.com의 ip주소를 받고 최종적으로 www.google.com의 ip를 받아오게 됩니다. pc는 최종 서버 ip로 HTTP Request를 보낸다. 3-way handshake syn \u003e ack, syn \u003e ack 4-way handshake fin \u003e ack(close wait) \u003e fin(last_ack) \u003e ack tls/ssl 좀 더 자세한 과정 설명 # RSA 키 교환 알고리즘 1. client hello (protocol version, 암호 알고리즘, 압축 방식, 클라 난수) 2. server hello (세션 ID, ca 인증서, 서버난수) 3. verify ca and get public key 4. 클라는 난수(pre master secret) 생성 후 public key로 암호화 후 서버 전달 5. 클라 세션키 생성 및 서버는 난수를 private key로 복호화 하여 대칭키(세션 키) 생성 6. 클라는 세션키(대칭키)로 암호화한 fin message를 서버로 전달 7. 서버 또한 세션키로 암호화한 fin message를 전달 8. 이후 세션키를 통해 통신 계속 진행 TCP vs UDP TCP UDP 연결방식 연결형서비스 비 연결형 서비스 패킷 교환 방식 가상 회선 방식 데이터그램 방식 전송 순서 전송 순서 보장 전송 순서가 바뀔 수 있음 수신 여부 확인 수신 여부를 확인함 수신 여부를 확인하지 않음 통신 방식 1:1 통신만 가능 1:1 / 1:N / N:N 통신 모두 가능 신뢰성 높음 낮음 속도 느림 빠름 Web Socket Handshake web socket mdn 클라와 서버가 서로 TCP/IP 4계층 레이어에서 통신한다. 즉 conneciton을 들고 있다. http 요청 이후, upgrade요청 한다. ping을 지속적으로 쏴서, health-check 로드 밸런싱(Load Balancing) 로드 밸런싱이란 여러 서버에게 균등하게 트래픽을 분산 시켜주는 것이다. nginx의 경우 기본적으로 라운드 로빈 방식으로 동작합니다. scale-out scale-up Nginx가 10k problem을 해결한 방식 기존 방식은 request당 하나의 process 또는 thread를 사용해서 요청들을 처리했습니다. 이에 반해 nginx는 worker pool을 두고 request가 들어올 때 마다, async하게 worker(default cpu 당 1)에게 task를 위임합니다. 이렇게 하게 될 경우 process/thread에 비해, pcb/tcb를 만드는데 들어가는 비용을 줄일 수 있으며 또한 사용자의 요청이 많아질 경우, 상대적으로 context switching에 사용되는 비용을 줄일 수 있습니다. 마지막으로 os가 스케쥴링에 들어가는 비용이 줄어듭니다. 즉 지정된 갯수의 미리생성된 process(thread) 워커를 사용함으로써, 기존의 request가 늘어날 때마다, os 리소스가 급격히 늘어나는 것을 방지하여, 이에 대한 side effect(스케쥴링, context-switching등에 대한 오버헤드를 막아줍니다.) 또한 워커에 필요한 리소스들을 미리 생성해두기 때문에 Process 생성에 들어가는 오버헤드를 줄여줍니다. ","date":"2022-01-10","objectID":"/interview/:2:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Database DB 트랜잭션이란? 트랜잭션은 데이터베이스의 데이터를 조작하는 논리적인 작업의 단위(unit of work)입니다. 트랜잭션은 ACID Atomicity all or nothing (rollback) db transaction, rollback으로 보장 Consistency transaction이 commit 되어도 DB의 여러 제약 조건에 맞는 상태를 보장하는 성질이다. 송금하는 사람의 계좌 잔고가 0보다 작아지면 안 된다. Isolation transaction이 진행되는 중간 상태의 데이터를 다른 transaction이 볼 수 없도록 보장하는 성질이다. 송금하는 사람의 계좌에서 돈은 빠져나갔는데 받는 사람의 계좌에 돈이 아직 들어가지 않은 DB 상황을 다른 transaction이 읽으면 안 된다. lock으로 구현 Durability transaction이 Commit했을 경우 해당 결과가 영구적으로 적용됨을 보장하는 성질이다 트랜잭션과 lock에 대해서 isolation과 연결 지어 설명해주세요 DB엔진은 ACID 원칙을 희생하여 동시성을 얻을 수 있는 방법을 제공합니다. Row level lock shared lock: read lock exclusive lock: write lock Record lock s lock: read index lock x lock: write index lock Gap lock: db index record의 gap에 걸리는 lock (gap = db에 실제 record가 없는 부분) lock은 모두 transaction이 commit 되거나 rollback 될 때 함께 unlock ","date":"2022-01-10","objectID":"/interview/:3:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Consistent read Isolation https://s1107.tistory.com/45 http://labs.brandi.co.kr/2019/06/19/hansj.html https://suhwan.dev/2019/06/09/transaction-isolation-level-and-lock/ index https://idea-sketch.tistory.com/43?category=547413 https://idea-sketch.tistory.com/45 DB index에 대해 설명해주세요 https://idea-sketch.tistory.com/43?category=547413 dirty read, Non-Repeatable Read, Phantom Read optimistic lock, pessimistic lock slow query Index ","date":"2022-01-10","objectID":"/interview/:4:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Software Engineering ","date":"2022-01-10","objectID":"/interview/:5:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Design Pattern ","date":"2022-01-10","objectID":"/interview/:6:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Language ","date":"2022-01-10","objectID":"/interview/:7:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["dev"],"content":"Computer Architecture ","date":"2022-01-10","objectID":"/interview/:8:0","tags":["dev","cs","interview"],"title":"All Basic Computer Science","uri":"/interview/"},{"categories":["algorithm"],"content":"About Binary Search and BST","date":"2022-01-08","objectID":"/binary_search/","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"Note Binary Search와 BST에 대해서 정리합니다. Binary Search는 divide conquer의 일종으로 검색 범위를 binary하게 줄여나가면서 원하는 데이터를 검색하는 알고리즘입니다. def binary_search(sorted_arr, target): n = len(sorted_arr) if n == 0: return -1 low, high = 0, n-1 while low \u003c=high: mid = (low + high) // 2 if sorted_arr[mid] == target: return mid if sorted_arr[mid] \u003e target: high = mid -1 else: low = mid + 1 return -1 # low == high + 1 == mid 눈여겨 봐야할 포인트는 다음 2가지이다. 검색 대상이 되는 arr가 sorted되어있다. while의 조건으로 low \u003c= high 등호가 들어있다. 검색의 범위 element가 2개로 좁혀졌을 때 // 2 연산에 의해서 왼쪽만 탐색이 될 텐데, 찾아야하는 값이 우측 값에 존재한다면 low와 high가 같아야만(low == high == mid) 검색이 가능하다. ","date":"2022-01-08","objectID":"/binary_search/:0:0","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"Binary Search 특징 retrieve Time complexity: O(log N) retrieve Space complexity: O(1) 삽입 / 삭제 불가 ","date":"2022-01-08","objectID":"/binary_search/:1:0","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"Binary Search Tree (BST) n= number of elements, h = tree height 들어가기 앞서, ratsgo를 참조하여 정리했음을 알려드립니다. 이진 탐색 트리란 Binary Search와 Linked list를 결합한 자료구조 입니다. 특히 Binary Search의 탐색 속도(O(log n)) 와 링크드리스트의 삽입/삭제 O(1)의 장점을 결합했다는 특징이 있습니다. 참고로 binary search는 삽입/삭제가 불가하며, 링크드리스트는 탐색 속도가 O(n)이라는 단점들이 있습니다. BST는 서로의 장점을 사용해 각각의 단점을 O(h)로 보완합니다. ","date":"2022-01-08","objectID":"/binary_search/:2:0","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"주요 특징 left.val \u003c root \u003c right.val inorder traverse(중위 순회)시 결과가 정렬된 리스트가 주어진다. left -\u003e node -\u003e right 구성하는 노드에서 중복된 노드가 없어야 한다. (unique 보장) 노드 끼리 우선순위 대소 비교가 가능해야 한다. retrieve, insert, delete의 계산복잡성은 모두 𝑂(ℎ) ","date":"2022-01-08","objectID":"/binary_search/:2:1","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"기본 데이터 형태 class Node: def __init__(self, val): self.val = val self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root: Optional[Node] = None def set_root(self, val): self.root = Node(val) ","date":"2022-01-08","objectID":"/binary_search/:2:2","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"retrieve / find Time Complexity: O(h) 탐색 대상과 root를 비교하여 left / right를 찾아나간다. 이 경우 Binary Search와 비슷하게 O(h) 시간 복잡도를 가진다. (아래와 같은 극단적 불균형 트리인 경우이면서, min/max값을 탐색한다면 O(n)) def find(self, val): node = self.find_node(self.root, val): return True if node else False def find_node(self, node, val) -\u003e Optional[Node]: if not node: return None elif val == node.val: return node elif val \u003c node.val: return self.find_node(node.left, val) else: return self.find_node(node.right, val) ","date":"2022-01-08","objectID":"/binary_search/:2:3","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"insert Time Complexity: O(h) O(logn)이 아닌 이유는 비대칭(Unbalanced Binary Tree)인 경우 tree의 높이가 n까지도 가능하기 때문이다. (sorted arr를 차례대로 insert 시킬경우) 이를 해결하기 위해서는 BF(balance factor)를 사용해 balance를 맞추는 AVL 또는 B-같은 트리를 사용해야 한다. def insert(self, val): if not self.root: self.set_root(val) else: self.insert_node(self.root, val) def insert_node(self, node, val): if val \u003c= node.val: if node.left: self.insert_node(node.left, val) else: node.left = Node(val) elif val \u003e node.val: if node.right: self.insert_node(node.right, val) else: node.right = Node(val) Tip AVL 트리는 rotation을 사용해 tree의 insert / delete 시 balance를 맞춘다. 그러므로 검색의 경우 항상 O(log n)을 보장한다. 특별한 점은 single rotation, double rotation을 통해서 tree의 balance를 맞추어 주는데 자세한 설명을 참조하세요 ","date":"2022-01-08","objectID":"/binary_search/:2:4","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"delete Time Complexity: O(h) 삭제는 총 3가지 경우가 존재합니다. leaf node (자식노드가 없는 경우) -\u003e 그냥 제거 자식노드가 하나 존재하는 경우 -\u003e 제거 후, 자식 노드를 삭제된 노드의 부모로 연결 자식노드가 둘 존재하는 경우 이 경우에는 predecessor 또는 successor를 삭제할 노드와 위치를 뒤 바꾼 다음, 1와 2의 삭제 방법을 사용하면 됩니다. (참고로 successor와 predecessor는 자식노드가 1개 또는 없는 경우 밖에 존재하지 않습니다.) predecessor로 제거, successor로 제거 둘다 가능 합니다. Tip predecessor: 삭제 대상 노드의 왼쪽 서브트리 가운데 최대값 successor: 삭제 대상 노드의 오른쪽 서브트리 가운데 최소값 그림 기준으로 16을 inorder traverse를 해보면 다음과 같습니다. 4, 10, 13, 16, 20, 22, 25, 28, 30, 42 이때, predecessor(13), successor(20)가 됩니다. # delete 방법 (d = 삭제 대상 노드의 레벨) 1. 삭제 대상 노드의 오른쪽 서브트리를 찾는다. 2. successor(1에서 찾은 서브트리의 최소값) 노드를 찾는다. 3. 2에서 찾은 successor의 값을 삭제 대상 노드에 복사한다. 4. successor 노드를 삭제한다. 가장 계산이 복잡한 자식 노드가 둘 모두 존재하는 경우의 시간 복잡도를 분서해보겠습니다. 1에서 d레벨(트리 높이) 만큼 이동을 해주어야 하며, 2에서 최대 h-d 레벨(트리높이)만큼 이동해주어야 합니다. 3과 4의 연산은 계산에서 제외한다면 O(d + h -d) =\u003e O(h)가 만들어집니다. e.g) 간단히 가장 복잡할 것 같은 root를 지운다 가정하였을 때, d = 1, h = h이므로 O(1 + h - 1)이 됩니다. ","date":"2022-01-08","objectID":"/binary_search/:2:5","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"traverse (inorder) Time Complexity: O(n) 위의 그림의 경우 1 -\u003e 3 -\u003e 5 -\u003e 7 -\u003e 8 -\u003e 10로 순회 가능하다. def traverse(self): return self.traverse_node(self.root) def traverse_node(self, node): result = [] if node.left: result.extend(self.traverse_node(node.left)) if node: result.extend([node.val]) if node.right: result.extend(self.traverse_node(node.right)) return result ","date":"2022-01-08","objectID":"/binary_search/:2:6","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"Conclusion 이상으로 binary search와 bst에 대하여 알아 보았습니다. 관련해서 leetcode문제는 binary search 에 정리를 해두었습니다. - 끝 - ","date":"2022-01-08","objectID":"/binary_search/:3:0","tags":["algorithm","dev"],"title":"Binary Search and BST","uri":"/binary_search/"},{"categories":["algorithm"],"content":"About DFS and BFS","date":"2022-01-06","objectID":"/dfs_bfs/","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"Note 간단하게 bfs와 dfs를 python으로 구현해보고, 상황별 장단점을 분석해본다. ","date":"2022-01-06","objectID":"/dfs_bfs/:0:0","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"1. Graph Traverse ","date":"2022-01-06","objectID":"/dfs_bfs/:1:0","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"1.1. BFS from collections import deque graph = { '5' : ['3','7'], '3' : ['2', '4'], '7' : ['8'], '2' : [], '4' : ['8'], '8' : [] } def bfs(start_node=\"5\"): queue = deque([start_node,]) visited = set() while queue: node = queue.pop() if node in visited:continue visited.add(node) for neighbor in graph[node]: queue.appendleft(neighbor) ","date":"2022-01-06","objectID":"/dfs_bfs/:1:1","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"1.2. DFS graph = { '5' : ['3','7'], '3' : ['2', '4'], '7' : ['8'], '2' : [], '4' : ['8'], '8' : [] } # 5 8 7 3 4 2 def dfs(start_node=\"5\"): stack = [start_node,] visited = set() while stack: node = stack.pop() if node in visited:continue visited.add(node) for neighbor in graph[node]: stack.append(neighbor) def recursive_dfs(node=\"5\", visited = set()): visited.add(node) for neighbor in graph[node]: if neighbor in visited: continue recursive_dfs(neighbor, visited) ","date":"2022-01-06","objectID":"/dfs_bfs/:1:2","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"1.3. BFS vs DFS 문제 유형별로 어떤 알고리즘이 더 유리한지 서술합니다.  : impossible  : good and possible  : bad but possible index Problem BFS DFS 1 그래프의 모든 정점을 방문 하는 문제 2 각 경로 마다 특징을 저장해둬야 하는 문제 3 최단 거리 문제 4 문제의 그래프가 매우 클 경우 5 검색 시작 지점과 원하는 대상이 가까이 있을 경우 단순히 모든 node 방문이라면 둘 모두 사용가능합니다. a-\u003eb로 가는 경로를 구할 때, 경로 안에서 같은 숫자가 x번 이상 없어야 하는 경우, dfs는 함수의 인자에 local 변수들을 좀 더 손 쉽게 줄 수 있는 반면, queue를 활용하는 bfs는 상태를 기억하기 좀 더 까다롭다. 물론 queue에 node를 넣을 때, local state를 같이 넣어주면 되긴 하지만, 이는 명시적이지 못하므로 dfs가 더 유리하다 생각된다. bfs의 경우 level(e.g 이동 count, tree의 level, ) 단위로 확장되기 때문에 목적지에 도착하는 순간 return한 값이 최소 이동거리가 되지만, dfs의 경우에는 깊이 있게 하나씩 파니까 상대적으로 bfs보다 오래 걸린다. Python의 경우 하나의 리스트가 가질 수 있는 Py_ssize_t는 536870912인 반면, 함수에 대한 메모리 제한은 두지 않고 있다. 그러므로 queue를 이용해서 구현하는 bfs의 경우 그래프가 크다면, 제한이 있는 반면 recursive function으로 구현한 dfs한정(stack으로 구현한 경우 동일한 문제발생)해서 function call stack을 사용해서 메모리 관리를 하기 때문에 상대적으로 더 큰 그래프 탐색에 사용될 수 있다. 3.의 경우와 같은 원리이다. ","date":"2022-01-06","objectID":"/dfs_bfs/:1:3","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"Conclusion 필자는 왠만하면 bfs를 좀 더 선호하는 경향이 있는데, 과거의 경험을 떠올려 보면, (정확하게 기억은 나지 않지만) path가 연속적으로 이어져야하는 로직에서 bfs가 불편했던 것 같다. DFS의 경우에는 처음부터 끝까지 연속적으로 탐색하기 때문에 비교적 쉽게 구현이 되었는데, BFS는 spread 하면서 이동하기 때문에 해당 상황에서 불리 했던 것 같다. dfs, bfs를 언제 써야하는지 개인적으로 헷갈렸었는데 표로 정리하고 나니 나중에도 유용하게 볼 것 같다. - 끝 - ","date":"2022-01-06","objectID":"/dfs_bfs/:2:0","tags":["algorithm","dev"],"title":"DFS and BFS","uri":"/dfs_bfs/"},{"categories":["algorithm"],"content":"About Binary Tree","date":"2022-01-06","objectID":"/binary_tree/","tags":["algorithm","dev"],"title":"Binary Tree","uri":"/binary_tree/"},{"categories":["algorithm"],"content":"Binary Tree child \u003e 2면 안된다. parent \u003e 1이면 안된다. root(부모가 없는 노드)는 한개만 존재해야 한다. array로 구현하면 편의를 위해 0인덱스를 비워둔다. parent = child % 2 lchild = parent * 2 rchild = parent * 2 + 1 ","date":"2022-01-06","objectID":"/binary_tree/:1:0","tags":["algorithm","dev"],"title":"Binary Tree","uri":"/binary_tree/"},{"categories":["algorithm"],"content":"Heap max heap, min heap (등호도 고려된다.) 대소 관계는 부모-자녀 간에만 고려된다. left child 먼저 삽입된다. (즉 leaf 중에 left 없이 right가 있는 경우는 없다.) ","date":"2022-01-06","objectID":"/binary_tree/:2:0","tags":["algorithm","dev"],"title":"Binary Tree","uri":"/binary_tree/"},{"categories":["algorithm"],"content":"Heap insert 인덱스 마지막에 새로운 요소 append (if parent is exist) 부모와 대소 비교 하여 exchange. (아래 -\u003e 위 heapify) ","date":"2022-01-06","objectID":"/binary_tree/:2:1","tags":["algorithm","dev"],"title":"Binary Tree","uri":"/binary_tree/"},{"categories":["algorithm"],"content":"Heap pop root pop 힙의 마지막 element를 root로 이동 힙 재구성 (= 위 -\u003e 아래 heapify) (if child exist) l, r 비교하여 현재 노드가 작다면 exchange (max heap 기준) 재귀적으로 반복 ","date":"2022-01-06","objectID":"/binary_tree/:2:2","tags":["algorithm","dev"],"title":"Binary Tree","uri":"/binary_tree/"},{"categories":["algorithm"],"content":"Heap sort O(n + n*logn) =\u003e O(nlogn) Max heap 구성(O(n)) 루트와 말단 노드 교체 후 heapify (O(nlogn)) O(logn) = 트리 최대 높이 = heapify시 depth n = 모든 노드들에 대하여 검사 ","date":"2022-01-06","objectID":"/binary_tree/:2:3","tags":["algorithm","dev"],"title":"Binary Tree","uri":"/binary_tree/"},{"categories":["dev"],"content":"홍정모의 따라하며 배우는 C++","date":"2022-01-03","objectID":"/hong_modern_cpp/","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":" 1. Terminology ","date":"2022-01-03","objectID":"/hong_modern_cpp/:0:0","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"1. Terminology 1.0.1. Basic C++ prototype forward declaration header guards (=include guards) 중복될 경우 한번만 include해라 (#pragma once) #pragma once 기 정의된 preprocessor의 일종 macro conditional compilation macro의 #ifdef, #ifndef, #else, #endif fundamental data types (=primitivate data types) auto는 데이터 타입을 자동으로 컴파일 타임에 찾아준다. 1.0.2. Variable and Fundamental types initialization copy initialization int a = 3; direct initialization int a(3); uniform initialization int a{ 3 }; Fixed-width Integers scientific notation inf: infinite nan: not a number ind: indeterminate literal constants symbolic constants constexpr(c++ 11): 컴파일 타임에 값이 완전히 결정되는 상수 const: 컴파일 타임 / 런타임에 값이 결정되는 모든 상수. (constexpr 포함) 1.0.3. Variable Scope and Extra types Scoped Enumerations (Enum Class) type aliases typedef using struct member selection operator = . memory padding 최적화를 위해서 member들의 순서를 고려해야 한다. (e.g short type 2byte는 2바이트가 뒤에 padding된다.) 1.0.4. Matrix, String, Pointer, Reference nullptr(null pointer) void pointer == generic pointer reference variable ","date":"2022-01-03","objectID":"/hong_modern_cpp/:1:0","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"2. Function Parameter function parameter #include \u003ciostream\u003e#include \u003carray\u003e using namespace std; bool isEven(const int \u0026number) { return (number % 2 == 0) ? true : false; } bool isOdd(const int \u0026number) { return !isEven(number); } void printNumbers(array\u003cint, 10\u003e \u0026arr, bool (*validator)(const int \u0026)) { for (int v : arr) if (validator(v)) cout \u003c\u003c v \u003c\u003c ' '; cout \u003c\u003c endl; } int main() { array\u003cint, 10\u003e my_arr{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; printNumbers(my_arr, isEven); // 0 2 4 6 8 printNumbers(my_arr, isOdd); // 1 3 5 7 9 return 0; } function parameter with using or typedef #include \u003ciostream\u003e#include \u003carray\u003e using namespace std; // typedef bool (*validator_fnc)(const int \u0026); using validator_fnc = bool (*)(const int \u0026); bool isEven(const int \u0026number) { return (number % 2 == 0) ? true : false; } bool isOdd(const int \u0026number) { return !isEven(number); } void printNumbers(array\u003cint, 10\u003e \u0026arr, validator_fnc validator) { for (int v : arr) if (validator(v)) cout \u003c\u003c v \u003c\u003c ' '; cout \u003c\u003c endl; } int main() { array\u003cint, 10\u003e my_arr{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; printNumbers(my_arr, isEven); // 0 2 4 6 8 printNumbers(my_arr, isOdd); // 1 3 5 7 9 return 0; } function parameter with std::function and default parameter #include \u003ciostream\u003e#include \u003carray\u003e#include \u003cfunctional\u003e using namespace std; using validator_fnc = function\u003cbool(const int \u0026)\u003e; bool isEven(const int \u0026number) { return (number % 2 == 0) ? true : false; } bool isOdd(const int \u0026number) { return !isEven(number); } void printNumbers(array\u003cint, 10\u003e \u0026arr, validator_fnc validator = isEven) { for (int v : arr) if (validator(v)) cout \u003c\u003c v \u003c\u003c ' '; cout \u003c\u003c endl; } int main() { array\u003cint, 10\u003e my_arr{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; printNumbers(my_arr); // 0 2 4 6 8 printNumbers(my_arr, isOdd); // 1 3 5 7 9 return 0; } 매우 파이썬스럽게, 가장 깔끔해 보인다. ","date":"2022-01-03","objectID":"/hong_modern_cpp/:2:0","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"3. Matrix double pointer #include \u003ciostream\u003eusing namespace std; void printMatrix(int **matrix, const int row, const int col) { for (int r = 0; r \u003c row; ++r) { for (int c = 0; c \u003c col; ++c) cout \u003c\u003c matrix[r][c] \u003c\u003c \" \"; cout \u003c\u003c endl; } } int main() { const int row = 3; const int col = 5; const int values[row][col] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, }; // init int **matrix = new int *[row]; for (int r = 0; r \u003c row; ++r) matrix[r] = new int[col]; // assign for (int r = 0; r \u003c row; ++r) for (int c = 0; c \u003c col; ++c) matrix[r][c] = values[r][c]; printMatrix(matrix, row, col); // delete for (int r = 0; r \u003c row; ++r) delete[] matrix[r]; delete[] matrix; return 0; } single pointer #include \u003ciostream\u003eusing namespace std; void printMatrix(int *matrix, const int row, const int col) { for (int r = 0; r \u003c row; ++r) { for (int c = 0; c \u003c col; ++c) cout \u003c\u003c matrix[(col * r) + c] \u003c\u003c \" \"; cout \u003c\u003c endl; } } int main() { const int row = 3; const int col = 5; const int values[row][col] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, }; // init int *matrix = new int[row * col]; // assign for (int r = 0; r \u003c row; ++r) for (int c = 0; c \u003c col; ++c) matrix[(col * r) + c] = values[r][c]; printMatrix(matrix, row, col); // delete delete[] matrix; return 0; } ","date":"2022-01-03","objectID":"/hong_modern_cpp/:3:0","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"4. Pointer ","date":"2022-01-03","objectID":"/hong_modern_cpp/:4:0","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"4.1. Pointer and Const { using namespace std; const int value = 6; const int new_value = 7; const int *ptr_1 = \u0026value; // 6 0x7ffeefb45158 0x7ffeefb45148 cout \u003c\u003c *ptr_1 \u003c\u003c ' ' \u003c\u003c ptr_1 \u003c\u003c ' ' \u003c\u003c \u0026ptr_1 \u003c\u003c endl; // *ptr_1 = new_value; (x) ptr_1 = \u0026new_value; // 7 0x7ffeefb45154 0x7ffeefb45148 cout \u003c\u003c *ptr_1 \u003c\u003c ' ' \u003c\u003c ptr_1 \u003c\u003c ' ' \u003c\u003c \u0026ptr_1 \u003c\u003c endl; } const int를 가리키고 있는 mutable한 포인터를 의미한다. 포인터가 가리키는 값이 const int이기 때문에 dereference해서 값을 바꿀 수 없다. 하지만 포인터 그 자체는 const하지 않기 때문에 새로운 주소값을 넣을 수 있다. { using namespace std; int value = 6; int new_value = 7; int *const ptr_value = \u0026value; // 6 0x7ffee173e158 0x7ffee173e148 cout \u003c\u003c *ptr_value \u003c\u003c ' ' \u003c\u003c ptr_value \u003c\u003c ' ' \u003c\u003c \u0026ptr_value \u003c\u003c endl; *ptr_value = new_value; // ptr_value = \u0026new_value; (x) // 7 0x7ffee173e158 0x7ffee173e148 cout \u003c\u003c *ptr_value \u003c\u003c ' ' \u003c\u003c ptr_value \u003c\u003c ' ' \u003c\u003c \u0026ptr_value \u003c\u003c endl; } int를 가리키는 *const 포인터. 포인터는 const이기 때문에 assign이 불가하지만, 포인터가 가리키는 값은 const하지 않기 때문에 변경 가능하다. 즉 포인터를 dereference(*)해서 값 대입 가능하다. c.f) int \u0026ref(레퍼런스)와 int *const ptr는 기능이 같다. { using namespace std; int value = 6; int new_value = 7; const int *ptr_value = \u0026value; // 6 0x7ffee6efb158 0x7ffee6efb148 cout \u003c\u003c *ptr_value \u003c\u003c ' ' \u003c\u003c ptr_value \u003c\u003c ' ' \u003c\u003c \u0026ptr_value \u003c\u003c endl; value = new_value; // 7 0x7ffee6efb158 0x7ffee6efb148 cout \u003c\u003c *ptr_value \u003c\u003c ' ' \u003c\u003c ptr_value \u003c\u003c ' ' \u003c\u003c \u0026ptr_value \u003c\u003c endl; // *ptr_value = new_value; (x) ptr_value = \u0026new_value; // 7 0x7ffee6efb154 0x7ffee6efb148 cout \u003c\u003c *ptr_value \u003c\u003c ' ' \u003c\u003c ptr_value \u003c\u003c ' ' \u003c\u003c \u0026ptr_value \u003c\u003c endl; } 가리키는 값이 const한 int인 포인터. value 자체는 const가 아니기 때문에 assign 가능하다. value가 const가 아니지만, 포인터는 값을 const하게 처리하기 때문에 dereference가 불가능하다. 포인터 자체는 const하지 않기 때문에 주소 할당이 가능하다. { using namespace std; const int value = 6; const int new_value = 7; const int *const ptr_value = \u0026value; // ptr_value = \u0026new_value; (x) // *ptr_value = new_value; (x) } const int를 가리키는 *const 포인터. pointer value assign과 dereference를 통한 assign 둘 모두 불가하다. ","date":"2022-01-03","objectID":"/hong_modern_cpp/:4:1","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"5. Reference ","date":"2022-01-03","objectID":"/hong_modern_cpp/:5:0","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["dev"],"content":"5.1. Reference and Const reference variable은 변수의 별명이다. (주소, 값 모두 같다.) 파라미터로 넘겨줄 경우, 다른 함수에서 변수를 변경가능하다. #include \u003ciostream\u003e void doSomething(const int value, const int \u0026ref) { using namespace std; cout \u003c\u003c value \u003c\u003c ' ' \u003c\u003c \u0026value \u003c\u003c ' ' \u003c\u003c ref \u003c\u003c ' ' \u003c\u003c \u0026ref \u003c\u003c endl; } int main() { int a = 5; // 5 0x7ffeeaf4e158 doSomething(a, a); // 5 0x7ffeeaf4e13c 5 0x7ffeeaf4e158 doSomething(a, 5); // 5 0x7ffeeaf4e13c 5 0x7ffeeaf4e154 return 0; } 파라미터에 변수로 받는 것과, reference로 받는 것은 무슨 차이가 있을까? 파라미터를 변수로 받으면 value copy가 일어난다. (비효율) 반면 reference를 사용한다면 실제 원래 변수와 같은 주소를 가지게 된다. 또한 const int \u0026ref처럼 const reference를 사용한다면 immutable하면서도 reference로 파라미터를 받아 효율을 추구할 수 있다. literal의 주소를 기억할 수 없기 때문에, reference variable 대입에는 lvalue가 들어가야 하지만, const reference타입은 literal을 받을 수 있다. (이 경우 literal을 위한 주소가 할당 된다.) ","date":"2022-01-03","objectID":"/hong_modern_cpp/:5:1","tags":["c++"],"title":"홍정모의 따라하며 배우는 C++","uri":"/hong_modern_cpp/"},{"categories":["todo"],"content":"Note This article is a simple list of todos that I will write to blog in my future. ","date":"2022-01-02","objectID":"/todo/:0:0","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1. TODO LIST ","date":"2022-01-02","objectID":"/todo/:1:0","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1.1. Plan 21년 회고 22년 목표 ","date":"2022-01-02","objectID":"/todo/:1:1","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1.2. Diary 나는 누구이고, 지금 어디에 존재하는가? 오쇼 글귀 정리 과거 네이버 / 커스텀 블로그 / 일기 글 migration ","date":"2022-01-02","objectID":"/todo/:1:2","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1.3. Server Dev hugo 블로그 구축기 kotlin 공부했던 글 정리 c++ 7장까지 들었던 글 정리 kotlin in action ","date":"2022-01-02","objectID":"/todo/:1:3","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1.4. Block chain binance academy gall dcinside 이더리움 크립토 좀비 디파이 로드맵 book: Mastering bitcoin, Mastering etherium web3.0 coin: 폴리곤, 폴카닷, 루나 etc coin: 솔라나 ","date":"2022-01-02","objectID":"/todo/:1:4","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1.5. Startup 온라인 전자담배 도매부터 판매까지 ","date":"2022-01-02","objectID":"/todo/:1:5","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["todo"],"content":"1.6. Phrase 내 어록 쓰기 ","date":"2022-01-02","objectID":"/todo/:1:6","tags":["todo","diary"],"title":"Todo List","uri":"/todo/"},{"categories":["hugo"],"content":"Hugo로 블로그 만들기","date":"2022-01-02","objectID":"/initial_hugo/","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"Note This article describes a series of technical steps to building this serious blog using the hugo framework. 사실 Hugo는 20년도에 혼자 제주도 여행을 가면서, 생각을 정리하고 싶어서 눈여겨 봤던 프레임워크이다. 당시 go를 공부하고 있었기 때문에 go로 만들어진 프레임워크라는 점에서 호감 +99점을 받았고, 이름이 다른 프레임워크들에 비해서 짧다는 장점이 있다. 🤔 Gatsby는 무슨 왁스 이름같고, Jekyll는 스펠링도 어렵고 사실 어떻게 발음해야 될지도 잘 모를정도로 이름이 못생김 이 블로그는 hugo와 LoveIt을 사용해 만들었다. keywords Hugo LoveIt git submodule github workflows shell script ","date":"2022-01-02","objectID":"/initial_hugo/:0:0","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"1. Pre-Init Blog MacBook Pro (16-inch, 2019) Big Sur ","date":"2022-01-02","objectID":"/initial_hugo/:1:0","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"1.1. Install hugo install hugo docs # Install brew $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" # download hugo $ brew install hugo # check hugo is successfully downloaded $ hugo version ","date":"2022-01-02","objectID":"/initial_hugo/:1:1","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"1.2. Select hugo templaate github에서 hugo를 검색하고, star많은 순으로 정렬 겉보기 이쁘다고 무턱대고 템플릿 가져다 쓰면, 아마 빠른시일 안에 블로그를 포기할 것임.. 1k 넘는 레포 중에서 이쁜거 찾는다. 검색 카테고리 기능 dark/light mode 댓글 기능 추천하는 테마들은 다음과 같다. ✅ https://github.com/dillonzq/LoveIt 👍 https://github.com/zzossig/hugo-theme-zzo https://github.com/luizdepra/hugo-coder https://github.com/adityatelange/hugo-PaperMod ","date":"2022-01-02","objectID":"/initial_hugo/:1:2","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"1.3. Generate your profile image 프로필 이미지 생성한 곳 이말년 스타일 프로필 이미지 필자는 프로필 사진에 cartoonize를 써보고 싶어서 github에서 ML 모델 위주로 검색했는데 원하는 곳을 찾지 못해서 대안으로 여기를 사용 하게 되었다. 이말년 그림체로 프로필 만들고 싶은데 뭔가 해줘야 할게 많아서 포기… 누가 online 서버 만들어주면 좋겠다…🥺 기타 작품들 열정적인 스터디원들 ","date":"2022-01-02","objectID":"/initial_hugo/:1:3","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"2. Init Blog 자 본격적으로 블로그 만들어보자. ","date":"2022-01-02","objectID":"/initial_hugo/:2:0","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"2.1. Generate Blog 먼저 블로그용 폴더를 만들고 템플릿을 submodule로 추가해보자. # hugo new site \u003cYOUR FOLDER NAME\u003e $ hugo new site love $ cd love $ git init $ git branch -M main # git remote add origin \u003cYOUR ROOT REPOSITORY\u003e $ git remote add origin https://github.com/minkj1992/love.git # git submodule add \u003cTHEME REPOSITORY\u003e themes/\u003cTHEME_NAME\u003e $ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt # + 사내 계정이라 config 변경 $ git config user.email minkj1992@gmail.com $ git config user.name \"minkj1992\" 필자의 경우 github page를 사용해서 블로그를 운영할 것이기 때문에, 미리 생성했던 YOUR_ID.github.io레포지토리를 submodule로 등록한다. # git submodule add \u003cYOUR_ID.github.io\u003e public $ git submodule add https://github.com/minkj1992/minkj1992.github.io public Warning $ git submodule add \u003cYOUR_ID.github.io\u003e public 명령어를 칠 때, 꼭 public을 디렉토리로 넣어주어야 한다! hugo는 스태틱 파일들을 public/ 디렉토리로 빌드해주고, 우리의 *.github.io는 블로그의 스태틱 파일들을 가지고 있어야 하니까 :) LoveIt config.toml의 example config.toml을 참조해서, 본인의 블로그 루트 디렉토리에 config.toml을 생성하고 필요한 설정들을 추가해주자. $ cp ./themes/LoveIt/exampleSite/config.toml ./config.toml # if you want to add image to site home $ mkdir -p assets/images # after this command, paste your profile \u0026 log image to images and change config.toml # (OPTIONAL) If you want to change css font-famiully and size, customize scss file. $ touch assets/_override.scss 자 이제 첫 글을 작성해보자. 주의할점은 draft:false가 되어있어야 hugo를 github page 배포했을 때, 깨지지 않고 배포 된다. # *.md draft must be falsed! $ hugo new posts/initial_post.md 글을 작성했다면, 로컬에서 실행시켜보자 (hot-reload적용 됨) 참고로 commit이 안되서, 실행이 안된다고 하니 이쯤에서 우선 커밋 먼저 해준다. (fatal: your current branch 'main' does not have any commits yet) $ git add . \u0026\u0026 git commit -m\"Initial commit\" # hot reload debug run server $ hugo server -D 정상적으로 블로그가 동작하는걸 확인했다면 배포를 해보자. 배포는 아래 과정을 거쳐 진행된다. hugo build ($ hugo) ./public commit \u0026 push (submodule e.g minkj1992.github.io) root repository push 먼저 hugo를 빌드하면 public/ 디렉토리에 파일들이 추가 된다. 추가된 파이들을 public의 remote로 push해주고, root 레포지토리로 돌아가서 push 해주면 된다. 필자는 아래의 스크립트를 사용해서 해당 과정을 진행해주고 있다. 2.1.1. git-push.sh #!/bin/sh # If a command fails then the deploy stops set -e printf \"\\033[0;32m I Love Leoo.j \\033[0m\\n\" printf \"\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\" printf \"\\033[0;32mBuild the project.\\033[0m\\n\" hugo -D # hugo -t timeline # if using a theme, replace with `hugo -t \u003cYOURTHEME\u003e` printf \"\\033[0;32m Go To Public folder \\033[0m\\n\" cd public printf \"\\033[0;32m Setting for submodule commit \\033[0m\\n\" git config --local user.name \"minkj1992\" git config --local user.email \"minkj1992@gmail.com\" git submodule update --init --recursive printf \"\\033[0;32m Add changes to git. \\033[0m\\n\" git add . printf \"\\033[0;32m Commit changes.. \\033[0m\\n\" msg=\"rebuilding site $(date)\" if [ -n \"$*\" ]; then msg=\"$*\" fi git commit -m \"$msg\" printf \"\\033[0;32m Push blog(presentation) source and build repos. \\033[0m\\n\" git push origin main printf \"\\033[0;32m Come Back up to the Project Root \\033[0m\\n\" cd .. echo $pwd printf \"\\033[0;32m root repository Commit \u0026 Push. \\033[0m\\n\" git add . msg=\"rebuilding site `date`\" if [ $# -eq 1 ] then msg=\"$1\" fi git commit -m \"$msg\" git push origin main shell을 만들었다면, 이제 배포 해보자. $ sh git-push.sh \u003cCOMMIT_MSG\u003e Tip 만약 github action을 사용하고 싶다면, https://github.com/minkj1992/love/blob/main/.github/samples/gh-pages.sample 를 사용 해보라. (단 secrets.PERSONAL_TOKEN은 github setting에서 ENV등록해 주어야 함) git hook을 쓰면 커밋이 편하긴 하지만, 개인적으로는 hook을 쓰면 로컬의 public/ 디렉토리의 git 버저닝이 관리되지 않고 있는게 눈에 거슬려서 shell을 사용 중이다. ","date":"2022-01-02","objectID":"/initial_hugo/:2:1","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["hugo"],"content":"3. Conclusion Nexters에서 2021년 회고글 작성하는 모임에 참석해서, 많은 개발자 분들이 notion으로 글을 정리하는 것에 자극 받아서, 바로 블로그를 만들게 되었는데 개인적으로 만족스럽다. 생각보다 에러 잡는데 시간을 많이 지체한 것 같고, github hook부분 기능을 잘 몰라 커스터마이징 하고 싶어 이것 저것 만져보다가 토요일 하루가 꼬박 걸렸는데 이 글을 읽는 여러분은 제가 했던 삽질을 경험하지 않길 바란다. - 끝 - ","date":"2022-01-02","objectID":"/initial_hugo/:3:0","tags":["hugo","blog","LoveIt"],"title":"Let's create blog with Hugo","uri":"/initial_hugo/"},{"categories":["Markdown"],"content":"This article shows the basic Markdown syntax and format.","date":"2022-01-01","objectID":"/first_post/","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files. Note This article is a shameful copy of the great Grav original page. If you want to know about the extented Markdown syntax of LoveIt theme, please read extended Markdown syntax page. Let’s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages. Markdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it. Some of the key benefits are: Markdown is simple to learn, with minimal extra characters, so it’s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use! John Gruber, the author of Markdown, puts it like this: The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. – John Gruber Without further delay, let us go over the main elements of Markdown and what the resulting HTML looks like! Tip  Bookmark this page for easy future reference! ","date":"2022-01-01","objectID":"/first_post/:0:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"1. Headings Headings from h2 through h6 are constructed with a # for each level: ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading The HTML looks like this: \u003ch2\u003eh2 Heading\u003c/h2\u003e \u003ch3\u003eh3 Heading\u003c/h3\u003e \u003ch4\u003eh4 Heading\u003c/h4\u003e \u003ch5\u003eh5 Heading\u003c/h5\u003e \u003ch6\u003eh6 Heading\u003c/h6\u003e Heading IDs To add a custom heading ID, enclose the custom ID in curly braces on the same line as the heading: ### A Great Heading {#custom-id} The HTML looks like this: \u003ch3 id=\"custom-id\"\u003eA Great Heading\u003c/h3\u003e ","date":"2022-01-01","objectID":"/first_post/:1:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"2. Comments Comments should be HTML compatible. \u003c!-- This is a comment --\u003e Comment below should NOT be seen: ","date":"2022-01-01","objectID":"/first_post/:2:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"3. Horizontal Rules The HTML \u003chr\u003e element is for creating a “thematic break” between paragraph-level elements. In Markdown, you can create a \u003chr\u003e with any of the following: ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks The rendered output looks like this: ","date":"2022-01-01","objectID":"/first_post/:3:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"4. Body Copy Body copy written as normal, plain text will be wrapped with \u003cp\u003e\u003c/p\u003e tags in the rendered HTML. So this body copy: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. The HTML looks like this: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e A line break can be done with one blank line. ","date":"2022-01-01","objectID":"/first_post/:4:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"5. Inline HTML If you need a certain HTML tag (with a class) you can simply use HTML: Paragraph in Markdown. \u003cdiv class=\"class\"\u003e This is \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Paragraph in Markdown. ","date":"2022-01-01","objectID":"/first_post/:5:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"6. Emphasis ","date":"2022-01-01","objectID":"/first_post/:6:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"6.1. Bold For emphasizing a snippet of text with a heavier font-weight. The following snippet of text is rendered as bold text. **rendered as bold text** __rendered as bold text__ The HTML looks like this: \u003cstrong\u003erendered as bold text\u003c/strong\u003e ","date":"2022-01-01","objectID":"/first_post/:6:1","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"6.2. Italics For emphasizing a snippet of text with italics. The following snippet of text is rendered as italicized text. *rendered as italicized text* _rendered as italicized text_ The HTML looks like this: \u003cem\u003erendered as italicized text\u003c/em\u003e ","date":"2022-01-01","objectID":"/first_post/:6:2","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"6.3. Strikethrough In GFMGitHub flavored Markdown you can do strikethroughs. ~~Strike through this text.~~ The rendered output looks like this: Strike through this text. The HTML looks like this: \u003cdel\u003eStrike through this text.\u003c/del\u003e ","date":"2022-01-01","objectID":"/first_post/:6:3","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"6.4. Combination Bold, italics, and strikethrough can be used in combination. ***bold and italics*** ~~**strikethrough and bold**~~ ~~*strikethrough and italics*~~ ~~***bold, italics and strikethrough***~~ The rendered output looks like this: bold and italics strikethrough and bold strikethrough and italics bold, italics and strikethrough The HTML looks like this: \u003cem\u003e\u003cstrong\u003ebold and italics\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003estrikethrough and bold\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003estrikethrough and italics\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003ebold, italics and strikethrough\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2022-01-01","objectID":"/first_post/:6:4","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"7. Blockquotes For quoting blocks of content from another source within your document. Add \u003e before any text you want to quote: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The rendered output looks like this: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. The HTML looks like this: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e Blockquotes can also be nested: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. The rendered output looks like this: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2022-01-01","objectID":"/first_post/:7:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"8. Lists ","date":"2022-01-01","objectID":"/first_post/:8:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"8.1. Unordered A list of items in which the order of the items does not explicitly matter. You may use any of the following symbols to denote bullets for each list item: * valid bullet - valid bullet + valid bullet For example: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2022-01-01","objectID":"/first_post/:8:1","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"8.2. Ordered A list of items in which the order of items does explicitly matter. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem The HTML looks like this: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e Tip If you just use 1. for each number, Markdown will automatically number each item. For example: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem The rendered output looks like this: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2022-01-01","objectID":"/first_post/:8:2","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"8.3. Task Lists Task lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media The rendered output looks like this: Write the press release Update the website Contact the media ","date":"2022-01-01","objectID":"/first_post/:8:3","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"9. Code ","date":"2022-01-01","objectID":"/first_post/:9:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"9.1. Inline Code Wrap inline snippets of code with `. In this example, `\u003csection\u003e\u003c/section\u003e` should be wrapped as **code**. The rendered output looks like this: In this example, \u003csection\u003e\u003c/section\u003e should be wrapped as code. The HTML looks like this: \u003cp\u003e In this example, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e should be wrapped with \u003cstrong\u003ecode\u003c/strong\u003e. \u003c/p\u003e ","date":"2022-01-01","objectID":"/first_post/:9:1","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"9.2. Indented Code Or indent several lines of code by at least four spaces, as in: // Some comments line 1 of code line 2 of code line 3 of code The rendered output looks like this: // Some comments line 1 of code line 2 of code line 3 of code The HTML looks like this: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2022-01-01","objectID":"/first_post/:9:2","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"9.3. Block Fenced Code Use “fences” ``` to block in multiple lines of code with a language attribute. ```markdown Sample text here... ``` The HTML looks like this: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2022-01-01","objectID":"/first_post/:9:3","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"9.4. Syntax Highlighting GFMGitHub Flavored Markdown also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code “fence”, ```js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` The rendered output looks like this: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; Note Syntax highlighting page in Hugo Docs introduces more about syntax highlighting, including highlight shortcode. ","date":"2022-01-01","objectID":"/first_post/:9:4","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"10. Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. The HTML looks like this: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e Right or center aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column. Adding colons on both sides of the dashes below any heading will center align text for that column. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | The rendered output looks like this: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2022-01-01","objectID":"/first_post/:10:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"11. Links ","date":"2022-01-01","objectID":"/first_post/:11:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"11.1. Basic Link \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) The rendered output looks like this (hover over the link, there is no tooltip): https://assemble.io contact@revolunet.com Assemble The HTML looks like this: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2022-01-01","objectID":"/first_post/:11:1","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"11.2. Add a Title [Upstage](https://github.com/upstage/ \"Visit Upstage!\") The rendered output looks like this (hover over the link, there should be a tooltip): Upstage The HTML looks like this: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2022-01-01","objectID":"/first_post/:11:2","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"11.3. Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. Note The specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works. ","date":"2022-01-01","objectID":"/first_post/:11:3","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"12. Footnotes Footnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page. To create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially. Add the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables. This is a digital footnote[^1]. This is a footnote with \"label\"[^label] [^1]: This is a digital footnote [^label]: This is a footnote with \"label\" This is a digital footnote1. This is a footnote with “label”2 ","date":"2022-01-01","objectID":"/first_post/:12:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"},{"categories":["Markdown"],"content":"13. Images Images have a similar syntax to links but include a preceding exclamation point. ![Minion](https://octodex.github.com/images/minion.png) or: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \" The Stormtroopocat Like links, images also have a footnote style syntax: ![Alt text][id] The DojocatAlt text \" The Dojocat With a reference later in the document defining the URL location: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" This is a digital footnote ↩︎ This is a footnote with “label” ↩︎ ","date":"2022-01-01","objectID":"/first_post/:13:0","tags":["Markdown","HTML"],"title":"Initial Post","uri":"/first_post/"}]